# -*- coding: utf-8 -*-
"""screen_beta_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RofcS56wRaRz1Sq0lm10knlK9rmVXRHR
"""

# Save this code as app.py and run with `streamlit run app.py`
import streamlit

# Page config
st.set_page_config(page_title="ChatGPT Black", layout="centered")

# Custom CSS
st.markdown("""
<style>
/* Base styling */
.stApp {
    background-color: #0d0d0d;
    color: #e0e0e0;
    font-family: 'Segoe UI', sans-serif;
    padding-bottom: 100px;
}

/* Chat area */
.chat-container {
    display: flex;
    flex-direction: column-reverse;
    height: 65vh;
    overflow-y: auto;
    padding: 16px;
    background-color: #121212;
    border-radius: 16px;
    border: 1px solid #333;
    margin-bottom: 20px;
}

/* Message bubbles */
.user-msg, .bot-msg {
    font-size: 16px;
    padding: 14px 18px;
    border-radius: 24px;
    margin: 8px;
    max-width: 85%;
    display: inline-block;
    position: relative;
}

.user-msg {
    background-color: #1f5130;
    color: #d9fdd3;
    align-self: flex-end;
    margin-left: auto;
}

.bot-msg {
    background-color: #202124;
    color: #c8e1ff;
    align-self: flex-start;
    margin-right: auto;
}

/* Avatar circle */
.avatar {
    width: 34px;
    height: 34px;
    border-radius: 50%;
    display: inline-block;
    text-align: center;
    line-height: 34px;
    font-size: 18px;
    font-weight: bold;
    margin-right: 8px;
}

.avatar.user {
    background-color: #2e7d32;
    color: white;
}

.avatar.bot {
    background-color: #1e1e1e;
    color: #6ec6ff;
}

/* Bottom input */
.bottom-input {
    position: fixed;
    bottom: 10px;
    left: 0;
    right: 0;
    width: 100%;
    background-color: #0d0d0d;
    padding: 12px 24px;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.4);
    z-index: 999;
}
</style>
""", unsafe_allow_html=True)

# Page title
st.title("ðŸ–¤ ChatGPT Black Theme")

# Session init
if "messages" not in st.session_state:
    st.session_state.messages = []

# Chat container
with st.container():
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for msg in reversed(st.session_state.messages):
        if msg["role"] == "user":
            st.markdown(
                f'<div class="user-msg"><span class="avatar user">ðŸ§‘</span>{msg["content"]}</div>',
                unsafe_allow_html=True)
        else:
            st.markdown(
                f'<div class="bot-msg"><span class="avatar bot">ðŸ¤–</span>{msg["content"]}</div>',
                unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Input section
with st.container():
    st.markdown('<div class="bottom-input">', unsafe_allow_html=True)
    user_input = st.text_input("You:", key="input", label_visibility="collapsed", placeholder="Type your message here...")
    st.markdown('</div>', unsafe_allow_html=True)

# Handle input
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    response = "This is a placeholder response."
    st.session_state.messages.append({"role": "bot", "content": response})
    st.experimental_rerun()
