# -*- coding: utf-8 -*-
"""screen_beta_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RofcS56wRaRz1Sq0lm10knlK9rmVXRHR
"""

# Save this code as app.py and run with `streamlit run app.py`
import streamlit as st

# Page config
st.set_page_config(page_title="ChatGPT Black", layout="centered")

# Custom CSS for dark theme, bigger chat window, bottom input
st.markdown(
    """
    <style>
    .stApp {
        background-color: #0d0d0d;
        color: #e0e0e0;
        padding-bottom: 80px;
    }

    .user-msg, .bot-msg {
        font-size: 16px;
        padding: 12px 16px;
        margin: 10px 0;
        border-radius: 10px;
        width: fit-content;
        max-width: 85%;
    }

    .user-msg {
        background-color: #1f5130;
        color: #d9fdd3;
        align-self: flex-end;
        margin-left: auto;
    }

    .bot-msg {
        background-color: #202124;
        color: #c8e1ff;
        align-self: flex-start;
        margin-right: auto;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 70vh;
        overflow-y: auto;
        padding: 10px;
        border: 1px solid #333;
        border-radius: 10px;
        background-color: #121212;
    }

    .bottom-input {
        position: fixed;
        bottom: 20px;
        left: 0;
        right: 0;
        width: 100%;
        background-color: #0d0d0d;
        padding: 10px 20px;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.4);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Page title
st.title("ðŸ–¤ ChatGPT Black Theme")

# Initialize session
if "messages" not in st.session_state:
    st.session_state.messages = []

# Chat message display area
with st.container():
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for msg in st.session_state.messages:
        role_class = "user-msg" if msg["role"] == "user" else "bot-msg"
        prefix = "ðŸ§‘" if msg["role"] == "user" else "ðŸ¤–"
        st.markdown(f'<div class="{role_class}">{prefix} {msg["content"]}</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Chat input at bottom
with st.container():
    st.markdown('<div class="bottom-input">', unsafe_allow_html=True)
    user_input = st.text_input("You:", key="input", label_visibility="collapsed", placeholder="Type your message here...")
    st.markdown('</div>', unsafe_allow_html=True)

# Handle input
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    # Dummy response â€” replace with actual model or logic
    response = "This is a placeholder response."
    st.session_state.messages.append({"role": "bot", "content": response})
    st.experimental_rerun()